# handlers/user_handlers.py
import io, threading, time
from telebot import types
from telebot.types import InputMediaPhoto
from config import CHANNEL_ID, USE_OVERLAY_ON_IMAGE
from utils import (set_state, get_state, clear_state, seconds_to_human,
                   main_keyboard, sendphoto_menu, yes_no_kb)
from db import (save_submission, get_last_submission_time)
from image_utils import overlay_id_on_image

# –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç bot, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
# —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç access –∫ –ë–û–¢–£, –ø—Ä–∏–Ω–∏–º–∞—é—Ç bot –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä.

def download_file_bytes(bot, file_id: str) -> bytes:
    try:
        f = bot.get_file(file_id)
        return bot.download_file(f.file_path)
    except Exception as e:
        print("download_file_bytes error:", e)
        return b""

def user_is_admin_or_mod(bot, user_id:int):
    # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ handlers/admin_handlers –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç list_admins/get_mods_list –∏–∑ db
    from db import list_admins, get_mods_list
    return user_id in list_admins() or user_id in get_mods_list()

def check_send_cooldown(user_id:int):
    from config import SEND_COOLDOWN_SECONDS
    from db import get_last_submission_time
    if user_is_admin_or_mod(None, user_id):  # bot –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        return None
    last = get_last_submission_time(user_id)
    if not last:
        return None
    elapsed = int(time.time()) - last
    if elapsed >= SEND_COOLDOWN_SECONDS:
        return None
    return SEND_COOLDOWN_SECONDS - elapsed

def user_is_subscribed(bot, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª CHANNEL_ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω (—Å—Ç–∞—Ç—É—Å member/creator/administrator/owner), –∏–Ω–∞—á–µ False.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî False.
    """
    try:
        cm = bot.get_chat_member(CHANNEL_ID, user_id)
        status = getattr(cm, "status", "")
        return status in ("member", "creator", "administrator", "owner")
    except Exception as e:
        # –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å e –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return False

# –•—ç–Ω–¥–ª–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ main (bot)
def register_user_handlers(bot):
    @bot.message_handler(commands=['start'])
    def cmd_start(message):
        clear_state(message.from_user.id)
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, message.from_user.id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=main_keyboard())

    @bot.message_handler(func=lambda m: m.text == "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
    def send_channel_link(message):
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, message.from_user.id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        # –°—Å—ã–ª–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç-–∫–Ω–æ–ø–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/Crash_russia_48", reply_markup=main_keyboard())

    @bot.message_handler(func=lambda m: m.text == "üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    def check_subscription_button(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
        –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.
        """
        user_id = message.from_user.id
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, user_id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        if user_is_admin_or_mod(bot, user_id) or user_is_subscribed(bot, user_id):
            bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.", reply_markup=main_keyboard())
        else:
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
            kb.add("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.", reply_markup=kb)

    @bot.message_handler(func=lambda m: m.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
    def menu_send_photo(message):
        if get_state(0, "is_banned") and get_state(0, "is_banned")(message.from_user.id):
            bot.reply_to(message, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")
            return
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, message.from_user.id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω/–º–æ–¥ –∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        if not user_is_admin_or_mod(bot, message.from_user.id) and not user_is_subscribed(bot, message.from_user.id):
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
            kb.add("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            bot.send_message(message.chat.id,
                             "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                             reply_markup=kb)
            return

        remaining = check_send_cooldown(message.from_user.id)
        if remaining:
            bot.send_message(message.chat.id, f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ {seconds_to_human(remaining)}.", reply_markup=main_keyboard())
            return

        set_state(message.from_user.id, "flow", "send_photo")
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=sendphoto_menu())

    @bot.message_handler(func=lambda m: m.text == "–û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ")
    def start_single(message):
        if get_state(0, "is_banned") and get_state(0, "is_banned")(message.from_user.id):
            bot.reply_to(message, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")
            return
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, message.from_user.id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not user_is_admin_or_mod(bot, message.from_user.id) and not user_is_subscribed(bot, message.from_user.id):
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
            kb.add("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ.", reply_markup=kb)
            return

        remaining = check_send_cooldown(message.from_user.id)
        if remaining:
            bot.send_message(message.from_user.id, f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ {seconds_to_human(remaining)}.", reply_markup=main_keyboard())
            return
        set_state(message.from_user.id, "mode", "single")
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ).", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))

    @bot.message_handler(func=lambda m: m.text == "–ê–ª—å–±–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ")
    def start_album(message):
        if get_state(0, "is_banned") and get_state(0, "is_banned")(message.from_user.id):
            bot.reply_to(message, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ.")
            return
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, message.from_user.id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not user_is_admin_or_mod(bot, message.from_user.id) and not user_is_subscribed(bot, message.from_user.id):
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
            kb.add("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª—å–±–æ–º—ã.", reply_markup=kb)
            return

        remaining = check_send_cooldown(message.from_user.id)
        if remaining:
            bot.send_message(message.chat.id, f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º —á–µ—Ä–µ–∑ {seconds_to_human(remaining)}.", reply_markup=main_keyboard())
            return
        set_state(message.from_user.id, "mode", "album_wait_media_group")
        bot.send_message(message.chat_id if hasattr(message,'chat_id') else message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–ª—å–±–æ–º (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, 2‚Äì10).", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))

    @bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
    def go_back(message):
        clear_state(message.from_user.id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    @bot.message_handler(content_types=['photo', 'document'])
    def handle_photo(message):
        user_id = message.from_user.id
        if get_state(0, "is_banned") and get_state(0, "is_banned")(user_id):
            bot.reply_to(message, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
            return
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, user_id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        mode = get_state(user_id, "mode")
        if mode == "single":
            file_id = None
            if message.photo:
                file_id = message.photo[-1].file_id
            elif message.document and getattr(message.document, "mime_type", "").startswith("image/"):
                file_id = message.document.file_id
            else:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return
            set_state(user_id, "single_photo", file_id)
            set_state(user_id, "mode", "single_wait_comment")
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è).", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))
            return

        if mode == "album_wait_media_group":
            mgid = getattr(message, "media_group_id", None)
            if not mgid:
                bot.reply_to(message, "–ê–ª—å–±–æ–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–ª—å–±–æ–º). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            album_collection = get_state(user_id, "album_collection") or {}

            entry = album_collection.get(mgid)
            if not entry:
                entry = {"photos": [], "collecting": True}
                album_collection[mgid] = entry
                set_state(user_id, "album_collection", album_collection)

                if message.photo:
                    entry["photos"].append(message.photo[-1].file_id)
                elif message.document and getattr(message.document, "mime_type", "").startswith("image/"):
                    entry["photos"].append(message.document.file_id)

                def finalize_album_for_mgid(u_id=user_id, m_id=mgid):
                    ac = get_state(u_id, "album_collection") or {}
                    e = ac.get(m_id)
                    if not e:
                        return
                    current_photos = e.get("photos", [])
                    ac.pop(m_id, None)
                    set_state(u_id, "album_collection", ac)

                    if len(current_photos) < 2:
                        bot.send_message(u_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å–±–æ–º —Å >=2 —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_keyboard())
                        clear_state(u_id)
                        return
                    set_state(u_id, "album_photos", current_photos)
                    set_state(u_id, "mode", "album_wait_comment")
                    bot.send_message(u_id, f"–ü–æ–ª—É—á–µ–Ω–æ {len(current_photos)} —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–ª—å–±–æ–º–∞ (–∏–ª–∏ '-' –¥–ª—è –ø—É—Å—Ç–æ–≥–æ).", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))

                threading.Timer(1.5, finalize_album_for_mgid).start()
            else:
                if message.photo:
                    entry["photos"].append(message.photo[-1].file_id)
                elif message.document and getattr(message.document, "mime_type", "").startswith("image/"):
                    entry["photos"].append(message.document.file_id)
                album_collection[mgid] = entry
                set_state(user_id, "album_collection", album_collection)
            return

        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: /start")

    @bot.message_handler(func=lambda m: get_state(m.from_user.id, "mode") in ["single_wait_comment", "album_wait_comment"])
    def handle_comment(message):
        user_id = message.from_user.id
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, user_id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        if message.text == "–û—Ç–º–µ–Ω–∞":
            clear_state(user_id)
            bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        comment = message.text if message.text != "-" else ""
        set_state(user_id, "last_comment", comment)
        set_state(user_id, "mode", "ask_nick")
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∞—à –Ω–∏–∫ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?", reply_markup=yes_no_kb())

    @bot.message_handler(func=lambda m: get_state(m.from_user.id, "mode") == "ask_nick")
    def handle_nick_choice(message):
        user_id = message.from_user.id
        if get_state(0, "is_sleeping") and not user_is_admin_or_mod(bot, user_id):
            bot.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ (23:00‚Äì07:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        choice = message.text
        if choice not in ("–î–∞","–ù–µ—Ç"):
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.")
            return
        attach_nick = (choice == "–î–∞")
        comment = get_state(user_id, "last_comment", "")
        username = message.from_user.username if attach_nick else None

        single_file = get_state(user_id, "single_photo")
        album_files = get_state(user_id, "album_photos", [])

        try:
            if single_file:
                internal_id = save_submission(user_id, username or "", "single", 0, 0)
                caption = bot.config_build_caption("–§–æ—Ç–æ", internal_id, username, comment or "")
                if USE_OVERLAY_ON_IMAGE:
                    bf = download_file_bytes(bot, single_file)
                    bf2 = overlay_id_on_image(bf, str(internal_id))
                    if not bf2:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
                    bio = io.BytesIO(bf2)
                    bio.name = f"{internal_id}.jpg"
                    sent = bot.send_photo(CHANNEL_ID, bio, caption=caption)
                else:
                    sent = bot.send_photo(CHANNEL_ID, single_file, caption=caption)
                channel_mid = sent.message_id
                from db import sqlite3
                conn = sqlite3.connect(bot.db_path)
                c = conn.cursor()
                c.execute("UPDATE submissions SET channel_message_id=? WHERE id=?", (channel_mid, internal_id))
                conn.commit(); conn.close()
                bot.send_message(message.chat.id, f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ù–æ–º–µ—Ä: {internal_id}", reply_markup=main_keyboard())
            elif album_files:
                internal_ids = []
                for idx in range(len(album_files)):
                    rid = save_submission(user_id, username or "", "album", 0, idx)
                    internal_ids.append(rid)

                media = []
                for idx, fid in enumerate(album_files):
                    if USE_OVERLAY_ON_IMAGE:
                        bf = download_file_bytes(bot, fid)
                        bf2 = overlay_id_on_image(bf, str(internal_ids[idx]))
                        if not bf2:
                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å/–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –≤ –∞–ª—å–±–æ–º–µ.")
                        bio = io.BytesIO(bf2)
                        bio.name = f"{internal_ids[idx]}.jpg"
                        if idx == 0:
                            caption_first = bot.config_build_caption("–ê–ª—å–±–æ–º", internal_ids[0], username, comment or "")
                            media.append(InputMediaPhoto(bio, caption=caption_first))
                        else:
                            media.append(InputMediaPhoto(bio))
                    else:
                        if idx == 0:
                            caption_first = bot.config_build_caption("–ê–ª—å–±–æ–º", internal_ids[0], username, comment or "")
                            media.append(InputMediaPhoto(fid, caption=caption_first))
                        else:
                            media.append(InputMediaPhoto(fid))

                sent_msgs = bot.send_media_group(CHANNEL_ID, media)
                first_mid = None
                if isinstance(sent_msgs, list) and len(sent_msgs) > 0:
                    first_mid = sent_msgs[0].message_id
                elif hasattr(sent_msgs, "message_id"):
                    first_mid = sent_msgs.message_id

                import sqlite3
                conn = sqlite3.connect(bot.db_path)
                c = conn.cursor()
                for rid in internal_ids:
                    c.execute("UPDATE submissions SET channel_message_id=? WHERE id=?", (first_mid if first_mid else 0, rid))
                conn.commit(); conn.close()

                bot.send_message(message.chat.id, f"–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ù–æ–º–µ—Ä–∞: {', '.join(str(x) for x in internal_ids)}", reply_markup=main_keyboard())
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_keyboard())
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", reply_markup=main_keyboard())

        clear_state(user_id)
