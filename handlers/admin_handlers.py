# handlers/admin_handlers.py
from utils import admin_panel_kb, seconds_to_human, clear_state, set_state, get_state
from db import list_admins, get_mods_list, get_submissions_last_24h, add_admin, remove_admin, add_mod, remove_mod, unban_user, ban_user
from datetime import datetime, timezone, timedelta
from config import MSK_UTC_OFFSET

def register_admin_handlers(bot):
    def user_is_admin_or_mod(user_id):
        from db import list_admins, get_mods_list
        return user_id in list_admins() or user_id in get_mods_list()

    @bot.message_handler(func=lambda m: m.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    def admin_panel(message):
        if not user_is_admin_or_mod(message.from_user.id):
            bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_kb())

    @bot.message_handler(func=lambda m: m.text == "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∑–∞ 24 —á–∞—Å–∞")
    def sent_last_24h_report(message):
        if not user_is_admin_or_mod(message.from_user.id):
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–æ–¥–æ–≤.")
            return
        now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
        now_msk = now_utc + timedelta(hours=MSK_UTC_OFFSET)
        next_midnight_msk = (now_msk + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        delta = next_midnight_msk - now_msk
        secs_to_cleanup = int(delta.total_seconds())

        subs = get_submissions_last_24h()
        if not subs:
            bot.send_message(message.chat.id, f"–î–æ –æ—á–∏—Å—Ç–∫–∏ –ë–î (00:00 –ú–°–ö) –æ—Å—Ç–∞–ª–æ—Å—å: {seconds_to_human(secs_to_cleanup)}.\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        by_user = {}
        for s in subs:
            by_user.setdefault(s['user_id'], []).append(s)
        lines = [f"–î–æ –æ—á–∏—Å—Ç–∫–∏ –ë–î (00:00 –ú–°–ö): {seconds_to_human(secs_to_cleanup)}", "", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∑–∞ 24 —á–∞—Å–∞:"]
        for uid, items in by_user.items():
            ids = ", ".join(str(it['id']) + (f"(idx:{it['channel_file_index']})" if it.get('channel_file_index') is not None else "") for it in items)
            lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid} ‚Äî –Ω–æ–º–µ—Ä–∞: {ids}")
        bot.send_message(message.chat.id, "\n".join(lines))

    @bot.message_handler(func=lambda m: m.text == "id –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    def send_admins_list(message):
        if not user_is_admin_or_mod(message.from_user.id):
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–æ–¥–æ–≤.")
            return
        admins = list_admins()
        mods = get_mods_list()
        text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + ("\n".join(str(x) for x in admins) if admins else "‚Äî –Ω–µ—Ç") + "\n\n–ú–æ–¥—ã:\n" + ("\n".join(str(x) for x in mods) if mods else "‚Äî –Ω–µ—Ç")
        bot.send_message(message.chat.id, text)

    @bot.message_handler(func=lambda m: m.text in ["–î–æ–±–∞–≤–∏—Ç—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞","–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞","–î–æ–±–∞–≤–∏—Ç—å - –∞–¥–º–∏–Ω–∞","–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å - –∞–¥–º–∏–Ω–∞","–†–∞–∑–±–∞–Ω","–ë–∞–Ω"])
    def admin_actions(message):
        if not user_is_admin_or_mod(message.from_user.id):
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–º–æ–¥–æ–≤.")
            return
        cmd = message.text
        set_state(message.from_user.id, "admin_action", cmd)
        if cmd == "–ë–∞–Ω":
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))
        else:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))

    @bot.message_handler(func=lambda m: get_state(m.from_user.id, "admin_action") is not None)
    def handle_admin_action_input(message):
        action = get_state(message.from_user.id, "admin_action")
        if message.text == "–û—Ç–º–µ–Ω–∞":
            clear_state(message.from_user.id)
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_panel_kb())
            return
        try:
            target_id = int(message.text.strip())
        except:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
            return

        if action == "–î–æ–±–∞–≤–∏—Ç—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            add_admin(target_id)
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        elif action == "–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            remove_admin(target_id)
            bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_id} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.")
        elif action == "–î–æ–±–∞–≤–∏—Ç—å - –∞–¥–º–∏–Ω–∞":
            add_mod(target_id)
            bot.send_message(message.chat.id, f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {target_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        elif action == "–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å - –∞–¥–º–∏–Ω–∞":
            remove_mod(target_id)
            bot.send_message(message.chat.id, f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {target_id} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω.")
        elif action == "–†–∞–∑–±–∞–Ω":
            unban_user(target_id)
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        elif action == "–ë–∞–Ω":
            set_state(message.from_user.id, "ban_target", target_id)
            set_state(message.from_user.id, "admin_action", "ban_wait_days")
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –±–∞–Ω–∞ –≤ –¥–Ω—è—Ö (1‚Äì180):", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))
            return
        clear_state(message.from_user.id)
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ.", reply_markup=admin_panel_kb())

    @bot.message_handler(func=lambda m: get_state(m.from_user.id, "admin_action") == "ban_wait_days")
    def finish_ban(message):
        if message.text == "–û—Ç–º–µ–Ω–∞":
            clear_state(message.from_user.id)
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_panel_kb())
            return
        try:
            days = int(message.text.strip())
        except:
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (1‚Äì180).")
            return
        if days < 1 or days > 180:
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 180.")
            return
        target = get_state(message.from_user.id, "ban_target")
        if not target:
            bot.reply_to(message, "–¶–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            clear_state(message.from_user.id)
            return
        ban_user(target, days)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        clear_state(message.from_user.id)
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ.", reply_markup=admin_panel_kb())
